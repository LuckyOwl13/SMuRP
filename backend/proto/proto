# Code expanded upon from resource:
# F. Maxwell Harper and Joseph A. Konstan. 2015. The MovieLens Datasets: History and Context. ACM Transactions on Interactive Intelligent Systems (TiiS) 5, 4, Article 19 (December 2015), 19 pages. DOI=<http://dx.doi.org/10.1145/2827872>

# import libraries
import numpy as np
import pandas as pd

# Reading ratings file
ratings = pd.read_csv('./ratings.csv', encoding='latin-1', usecols=['user_id','song_id','rated','rating_time'])

# Reading users file
users = pd.read_csv('./user.csv', encoding='latin-1', usecols=['user_id'])

# Reading songs file
songs = pd.read_csv('./song.csv', encoding='latin-1', usecols=['song_id', 'song_title'])

n_users = ratings.user_id.unique().shape[0]
n_songs = ratings.song_id.unique().shape[0]

print ('Number of users = ', str(n_users), ' | Number of songs = ', str(n_songs))

Ratings = ratings.pivot(index = 'user_id', columns ='song_id', values = 'rated').fillna(0)
Ratings.head()

R = Ratings.as_matrix()
user_ratings_mean = np.mean(R, axis = 1)
Ratings_demeaned = R - user_ratings_mean.reshape(-1, 1)

sparsity = round(1.0 - len(ratings) / float(n_users * n_songs), 3)
print ('The sparsity level of SMuRP dataset is ', str(sparsity * 100), '%')

from scipy.sparse.linalg import svds
U, sigma, Vt = svds(Ratings_demeaned, k = 50)

sigma = np.diag(sigma)

all_user_predicted_ratings = np.dot(np.dot(U, sigma), Vt) + user_ratings_mean.reshape(-1, 1)

preds = pd.DataFrame(all_user_predicted_ratings, columns = Ratings.columns)
preds.head()

def recommend_songs(predictions, userID, songs, original_ratings, num_recommendations):
    
    # Get and sort the user's predictions
    user_row_number = userID - 1 # User ID starts at 1, not 0
    sorted_user_predictions = preds.iloc[user_row_number].sort_values(ascending=False) # User ID starts at 1
    
    # Get the user's data and merge in the movie information.
    user_data = original_ratings[original_ratings.user_id == (userID)]
    user_full = (user_data.merge(songs, how = 'left', left_on = 'song_id', right_on = 'song_id').
                     sort_values(['rated'], ascending=False)
                 )

    print ('User ', userID, ' has already rated ',user_full.shape[0],' songs.')
    print ('Recommending highest ', num_recommendations, ' predicted ratings songs not already rated.')
    
    # Recommend the highest predicted rating movies that the user hasn't seen yet.
    recommendations = (songs[~songs['song_id'].isin(user_full['song_id'])].
         merge(pd.DataFrame(sorted_user_predictions).reset_index(), how = 'left',
               left_on = 'song_id',
               right_on = 'song_id').
         rename(columns = {user_row_number: 'Predictions'}).
         sort_values('Predictions', ascending = False).
                       iloc[:num_recommendations, :-1]
                      )

    return user_full, recommendations

already_rated, predictions = recommend_songs(preds, 22, songs, ratings, 5)

# Top 5 songs that User 22 has rated 
already_rated.head(5)
print(already_rated.head(5))

# Top 5 songs that User 22 hopefully will enjoy
print (predictions)
